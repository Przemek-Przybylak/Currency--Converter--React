{"version":3,"sources":["Form/currencies.js","Section/styled.js","Section/index.js","Time/styled.js","Time/index.js","Time/useCurrentTime.js","Form/useCurrentData.js","Form/styled.js","Form/index.js","Container/styled.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["currencies","name","rate","StyledSection","styled","section","StyledParagraph","p","Section","result","sourceAmount","toFixed","targetAmount","currency","StyledDiv","div","Time","time","useState","Date","currentTime","setcurrentTime","useEffect","intervalId","setInterval","clearInterval","useCurrentTime","toLocaleString","weekday","day","month","year","hour","minute","second","useCurrentData","state","ratesData","setRatesData","setTimeout","a","fetch","response","ok","Error","statusText","json","rates","date","StyledForm","form","StyledLabel","label","StyledFieldset","fieldset","StyledLegend","legend","StyledSpan","span","StyledInput","input","StyledButton","button","Form","setResult","setCurrency","amount","setAmount","type","min","step","placeholder","className","value","onChange","target","as","Object","keys","map","onClick","event","preventDefault","getResult","StyledContainer","main","Container","props","children","App","currenciess","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7fca2e1.chunk.js","sourcesContent":["export const currencies = [\r\n    {name: 'EUR', rate: 4.55},\r\n    {name: 'USD', rate: 3.79},\r\n    {name: 'CHF', rate: 4.13},\r\n  ];\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    text-align: center;\r\n    max-width: 300px;\r\n    background-color: rgb(4, 164, 228);\r\n    color: white;\r\n    font-weight: 700;\r\n    padding: 5px;\r\n`;\r\n\r\nexport const StyledParagraph = styled.p`\r\n    padding: 0;\r\n    margin: 0;\r\n`;","import { StyledSection, StyledParagraph } from \"./styled\";\r\n\r\nexport const Section = ({ result }) => (\r\n  <StyledSection>\r\n    <StyledParagraph>\r\n      <span>Wynik to: </span>\r\n      <strong>\r\n        {result && (\r\n          <>\r\n            {result.sourceAmount\r\n              ? ` ${result.sourceAmount.toFixed(2)} PLN = `\r\n              : \"\"}\r\n            {result.targetAmount ? `${result.targetAmount.toFixed(2)} ` : \"\"}\r\n            {result.sourceAmount ? result.currency : \"\"}\r\n          </>\r\n        )}\r\n      </strong>\r\n    </StyledParagraph>\r\n  </StyledSection>\r\n);\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDiv = styled.div`\r\n    margin: 0px;\r\n    margin-bottom: 10px;\r\n    color: rgb(172, 172, 172);\r\n    font-family: 'Roboto Mono', monospace;\r\n    font-size: 10px;\r\n`;\r\n\r\nexport const StyledParagraph = styled.p`\r\n    margin: 0px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;","import { StyledDiv, StyledParagraph } from \"./styled\";\r\nimport { useCurrentTime, } from \"./useCurrentTime\";\r\n\r\nexport const Time = () => {\r\n    const time = useCurrentTime();\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <StyledParagraph>Dzisiaj jest{\" \"}\r\n                {time.toLocaleString(\"pl\", {\r\n                    weekday: \"long\",\r\n                    day: \"numeric\",\r\n                    month: \"numeric\",\r\n                    year: \"numeric\",\r\n                    hour: \"numeric\",\r\n                    minute: \"numeric\",\r\n                    second: \"numeric\"\r\n                })}\r\n            </StyledParagraph>\r\n        </StyledDiv>\r\n    );\r\n};","import { useEffect, useState } from \"react\";\r\n\r\nexport const useCurrentTime = () => {\r\n    const [currentTime, setcurrentTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setcurrentTime(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, [setcurrentTime]);\r\n\r\n    return currentTime;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport const useCurrentData = () => {\r\n    const [ratesData, setRatesData] = useState({\r\n        state: \"loading\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(\"https://api.exchangerate.host/latest?base=PLN\");\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                };\r\n\r\n                const { rates, date } = await response.json();\r\n\r\n                setRatesData({\r\n                    state: \"success\",\r\n                    rates,\r\n                    date,\r\n                });\r\n            } catch {\r\n                setRatesData({\r\n                    state: \"error\",\r\n                });\r\n            };\r\n        };\r\n\r\n        setTimeout(fetchData, 1000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n};","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    margin: 20px auto;\r\n    max-width: 600px;\r\n`;\r\n\r\nexport const StyledDiv = styled.div`\r\n    padding: 10px 20px 10px 20px;\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n`;\r\n\r\nexport const StyledLabel = styled.label`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const StyledFieldset = styled.fieldset`\r\n    padding: 15px;\r\n    border: none;\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport const StyledLegend = styled.legend`\r\n    margin: auto;\r\n    background-color: rgb(4, 164, 228);\r\n    color: white;\r\n    font-weight: 700;\r\n`;\r\n\r\nexport const StyledSpan = styled.span`\r\n    display: inline-block;\r\n    width: 100%;\r\n    max-width: 200px;\r\n    margin: 5px;\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    width: 100%;\r\n    max-width: 300px;\r\n    padding: 3px;\r\n    border: 1px solid #ccc;\r\n    text-align: center;\r\n    font-weight: 700;\r\n\r\n    @media (max-width:836px) {\r\n        max-width: none;\r\n    };\r\n\r\n    &:invalid {\r\n        background-color: rgb(255, 180, 180);\r\n    };\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    margin: 5px auto;\r\n    width: 100%;\r\n    border: none;\r\n    padding: 3px;\r\n    background-color: rgb(4, 164, 228);\r\n    color: white;\r\n`;","import { useState } from \"react\";\r\nimport { currencies } from \"./currencies\";\r\nimport { Section } from \"../Section\";\r\nimport { Time } from \"../Time\";\r\nimport { useCurrentData } from \"./useCurrentData\";\r\nimport {\r\n    StyledForm,\r\n    StyledDiv,\r\n    StyledLabel,\r\n    StyledFieldset,\r\n    StyledLegend,\r\n    StyledSpan,\r\n    StyledInput,\r\n    StyledButton\r\n} from \"./styled\";\r\n\r\nexport const Form = () => {\r\n    const [result, setResult] = useState();\r\n    const ratesData = useCurrentData();\r\n\r\n    const getResult = (currency, amount) => {\r\n        const rate = ratesData.rates[currency];\r\n\r\n        setResult({\r\n            sourceAmount: +amount,\r\n            targetAmount: amount * rate,\r\n            currency,\r\n        });\r\n    };\r\n\r\n    const [currency, setCurrency] = useState(\"EUR\");\r\n    const [amount, setAmount] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        getResult(currency, amount);\r\n    };\r\n\r\n    const onClickClear = () => {\r\n        setAmount(\"\");\r\n        setResult(\"\");\r\n    };\r\n\r\n    return (\r\n        <StyledForm>\r\n            <StyledDiv>\r\n                <Time />\r\n                <StyledFieldset>\r\n                    {ratesData.state === \"loading\" ? (\r\n                        <p>\r\n                            Proszę czekać, trwa pobieranie danych...\r\n                        </p>\r\n                    ) : ratesData.state === \"error\" ? (\r\n                        <p>\r\n                            Niestety nie udało się załadować walut<br />\r\n                            Sprawdz czy masz internet, jeśli masz to spróbuj później!\r\n                        </p>\r\n                    ) : (\r\n                        <>\r\n                            <StyledLegend>Kalkulator walutowy</StyledLegend>\r\n                            <p>\r\n                                <StyledLabel>\r\n                                    {currencies}\r\n                                    <StyledSpan>Podaj kwotę w PLN: </StyledSpan>\r\n                                    <StyledInput\r\n                                        type=\"number\"\r\n                                        min=\"1\" step=\"1\"\r\n                                        placeholder=\"Wpisz kwotę...\"\r\n                                        className=\"form__input \"\r\n                                        value={amount}\r\n                                        onChange={({ target }) => setAmount(target.value)}\r\n                                    />\r\n                                </StyledLabel>\r\n                            </p>\r\n                            <StyledLabel>\r\n                                <StyledSpan>Wybierz walutę</StyledSpan>\r\n                                <StyledInput as=\"select\"\r\n                                    value={currency}\r\n                                    onChange={({ target }) => setCurrency(target.value)}\r\n                                >\r\n                                    {Object.keys(ratesData.rates).map((currency => (\r\n                                        <option\r\n                                            key={currency}\r\n                                            value={currency}\r\n                                        >\r\n                                            {currency}\r\n                                        </option>\r\n                                    )))};\r\n                                </StyledInput>\r\n                            </StyledLabel>\r\n                        </>)}\r\n                </StyledFieldset>\r\n                <StyledButton onClick={onFormSubmit}>Przelicz</StyledButton>\r\n                <StyledButton type=\"reset\" onClick={onClickClear} >Wyczyść formularz</StyledButton>\r\n                <Section result={result} />\r\n            </StyledDiv>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    margin: 0px auto;\r\n    background-image: url(\"https://cdn.wallpapersafari.com/14/53/1xAB3U.jpg\");\r\n    background-size: cover;\r\n    height: 100vh;\r\n    overflow-y: hidden;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nexport const Container = (props) => (\r\n    <StyledContainer>\r\n        {props.children}\r\n    </StyledContainer>\r\n);\r\n\r\n","import { Form } from './Form';\r\nimport { Container } from \"./Container\";\r\nimport { useCurrentData } from './Form/useCurrentData';\r\n\r\nfunction App(result, getResult) {\r\n  const currenciess = useCurrentData();\r\n\r\n  return (\r\n    <Container >\r\n      <Form\r\n        result={result}\r\n        currenciess={currenciess}\r\n        getResult={getResult} />\r\n    </ Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}